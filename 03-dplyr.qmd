---
title: "Section 3: `Intro`dplyr`"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

## Section 3.2: Practice

Class Exercises 1 and 2.

```{r}
library(babynames)
library(tidyverse)
babynames_m10 <- babynames |>
  filter(sex == "M" & year == 2017) |>
  arrange(desc(n)) |>
  slice(1:10)
babynames_m10

ggplot(data = babynames_m10, aes(x = name, 
                                 y = n)) +
  geom_col()
```

Class Exercises 3 and 4

```{r}
babynames_hayden <- babynames |>
  filter(name == "Hayden" & sex == "M")

ggplot(data = babynames_hayden,
       aes(x = year, y = n)) +
  geom_line()
```

Class Exercise 5.

This returns a missing value because the first argument of `mean()` is not a data frame. For most tidyverse functions (`slice()`, `filter()`, etc.), the first argument is a data frame so we can use the pipe for these.

## Your Turn

Your Turn 1

```{r}
## a
babynames |> filter(year != 1945)

## b
babynames |> filter(n > 400 & n < 5000)


## c
babynames_mh <- babynames |>
  filter((sex == "F" & name == "Hilary") |
                      (sex == "F" & name == "Monica"))
babynames_mh

## your turn 2
ggplot(data = babynames_mh, aes(x = year, y = n,
                                colour = name)) +
  geom_line()

## your turn 4
babynames_2001f <- babynames |> filter(year == 2001 & sex == "F") |>
  arrange(desc(n)) |>
  slice(1:10)
ggplot(data = babynames_2001f, aes(x = name, y = n)) +
  geom_col()

## your turn 3
baby5 <- babynames |>
  filter((name == "Matthew" & sex == "M") |
                      (name == "Ivan" & sex == "M") |
                      (name == "Jessica" & sex == "F") |
                      (name == "Robin" & sex == "M") |
                      (name == "Michael" & sex == "M"))

ggplot(data = baby5, aes(x = year, y = n)) +
  geom_line(aes(colour = name))
```

## Section 3.3

```{r}
library(tidyverse)
slumajors_df <- read_csv("https://raw.githubusercontent.com/highamm/ds234_quarto/main/data_online/SLU_Majors_17_21.csv")
slumajors_df

slumajors_df <- slumajors_df |>
  mutate(ntotal = nfemales + nmales) |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))

slumajors_df <- slumajors_df |>
  mutate(morewomen = if_else(percfemale > 50,
                             true = "Yes",
                             false = "No")) |>
  mutate(large_majority =
           case_when(percfemale >= 70 ~ "female",
                     percfemale <= 30 ~ "male",
                     percfemale > 30 & percfemale < 70 ~ "none")) 

toy_df <- tibble(x = c(NA, 3, 4, 7),
                 y = c(1, 4, 3, 2),
                 z = c("A", "A", "B", NA))
```

## Class Exercises

Class Exercise 1. It depends on what you're interested in. But, for example, if you're interested in gender balance of these majors, the 55% cutoff might make more sense.

Class Exercise 2. It is definitely nice to be as inclusive as possible. But we should be careful not to inadvertently make a survey that is supposed to be anonymous not so. 

Class Exercise 4 and 5.

```{r}
library(babynames)
babynames_rank <- babynames |> group_by(sex, year) |>
  mutate(rank_pop = rank(desc(n)))
babynames_rank |> filter(rank_pop == 1) |>
  ungroup() |>
  group_by(name) |>
  summarise(n_appear = n())
```

Class Exercise 6.

```{r}
babynames_test <- babynames |>
  group_by(year, sex) |> mutate(ntest = n / prop)
babynames_test |> slice(1, 2, 3, 4, 5)
```

This is returning the first five rows for each of the 270 groups. If we want just the first 5 rows, we would need to add an `|> ungroup()` before `slice()`. 

## Your Turn

```{r}
toy_df <- tibble(x = c(NA, 3, 4, 7),
                 y = c(1, 4, 3, 2),
                 z = c("A", "A", "B", NA))
toy_df
```
Your Turn 2.

a. 

```{r}
toy_df |> mutate(x_test = x + 2)
# NA is still NA in new variable
```

b. 

```{r}
toy_df |> arrange(x)
toy_df |> arrange(desc(x))
## missing values always go at the end
```

c.

```{r}
toy_df |> filter(x < 5)
## removes the NA values when performing this filter()
```

d. 

```{r}
toy_df |> summarise(max_x = max(x))
## returns an NA. Use `na.rm = TRUE` argument to max()
## to get it to return 7 instead.
```

e. 

```{r}
toy_df |> group_by(z) |>
  summarise(median_x = median(x))
## the NA in z forms its own group
```

Your Turn 3.

a. mutate() generally safe: not changing the original data set, just giving it a new column.

b. arrange() generally safe: same reason as (a).

c. generally unsafe, unless you are absolutely sure that you will never need the observations that you filter out.

d. generally unsafe, because you're collapsing the data set into a different structure

e. generally unsafe, unless you are absolutely sure that you will never need the variables that you select out.

Your Turn 4.

```{r}
slumajors_df |>
  summarise(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) 
slumajors_df |>
  mutate(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) |>
  select(meantotalmajor, totalgrad, everything())

## mutate() simply adds new columns to the current data
## preserving its structure (so the new data has the 
## same number of rows with two additional columns)

## summarise() collapses the data over any groups. In
## this case, there are no groups, so the resulting
## data is just a single row.
```

Your Turn 5.

```{r}
babynames_distinct <- babynames |> group_by(year) |>
  summarise(n_name = n())

ggplot(data = babynames_distinct, aes(x = year, 
                                      y = n_name)) +
  geom_line()
```