---
title: "Section 6: Tidying with `tidyr`"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

## Section 6.1: What is Tidy Data?

1. every variable in the data set is stored in its own column
2. every case in the data set is stored in its own row
3. each value of a variable is stored in one cell
4. values in the data set should not contain units
5. there should not be any table headers or footnotes

## Section 6.2

```{r}
library(tidyverse)
library(here)
polls <- read_csv(here("data/rcp-polls.csv"), na = "--")
polls

polls |> summarise(meansample = mean(Sample))

polls |>
  separate(col = Sample, into = c("Sample_size", "Sample_type"), 
           sep = " ")

polls_sep <- polls |>
  separate(col = Date, into = c("Start", "End"),
           sep = " - ")
polls_sep


polls_sillytest <- polls_sep |>
  separate(col = Start, into = c("Start_month", "Start_day"), 
           sep = "/")
polls_sillytest

polls_sillytest |>
  unite("New_start_date", c(Start_month, Start_day),
        sep = "/")
```

Exercises

```{r}
toy_df <- tibble::tibble(show = c("Bojack Horseman: Netflix",
                                  "VEEP: HBO",
                                  "American Vandal: Netflix",
                                  "Community: Peacock"),
                         seasons = c("1-6", "1-7", "1-2", "1-6"),
                         main_first = c("Bojack", "Selina", "Peter", "Jeff"),
                         main_last = c("Horseman", "Meyer", "Molganado", "Winger"))
toy_df

## exercise 1
toy_df |> separate(show, into = c("Show Name", "Streaming"),
                   sep = ": ")
## exercise 2
toy_df |> separate(seasons, into = c("start", "end"), sep = "-")

## exercise 3
toy_df |> unite("character_name", c(main_first, main_last), sep = " ")
```

## Section 6.3: Reshaping with `pivot_()`

```{r}
polls_clean <- polls |>
  separate(col = Sample, into = c("Sample_size", "Sample_type"), 
           sep = " ")  |>
  separate(col = Date, into = c("Start", "End"),
           sep = " - ") |> 
  rename(Clinton_D = `Clinton (D)`, Trump_R = `Trump (R)`,
         Johnson_L = `Johnson (L)`, Stein_G = `Stein (G)`)
polls_clean

polls_clean |>
  pivot_longer(cols = c(Clinton_D, Trump_R, Johnson_L, Stein_G),
               names_to = "candidate", values_to = "poll_percent") 

polls_long <- polls_clean |>
  pivot_longer(cols = c(Clinton_D, Trump_R, Johnson_L, Stein_G),
               names_to = "candidate", values_to = "poll_percent")

## ignore as.Date for now....we will get to dates later!
ggplot(data = polls_long,
       aes(x = as.Date(Start, "%m/%d"), y = poll_percent,
           colour = candidate)) +
  geom_point() + labs(x = "Poll Start Date")
```

#### `pivot_wider()`

```{r}
stat113_df <- read_csv(here::here("data/stat113.csv"))
stat113_sum <- stat113_df |> filter(!is.na(Sex)) |> group_by(Year, Sex) |>
  summarise(n_students = n())
stat113_sum

stat113_sum |> pivot_wider(names_from = Year, values_from = n_students)

```

Exercise 4

```{r}
stat113_df |> 
  filter(!is.na(Sex) & !is.na(Sport)) |>
  group_by(Sex, Sport) |>
  summarise(mean_gpa = mean(GPA, na.rm = TRUE)) |>
  pivot_wider(names_from = Sport, values_from = mean_gpa)
```

Exercise 5

```{r}
disease_df <- tibble::tibble(location = c("A", "B", "C", "D", "E"),
                             year1 = c(5, 1, 10, 400, 31),
                             year2 = c(10, 80, 99, 100, 1),
                             year3 = c(0, 0, 20, 0, 40))
disease_df |> pivot_longer(c(year1, year2, year3),
                           names_to = "year",
                           values_to = "deaths")
```

## Class Exercises

Class Exercise 1

Class Exercise 2

```{r}
prices_df <- read_csv(here("data/UBSprices2.csv"))

prices_long <- prices_df |> pivot_longer(c(2, 3, 4, 5, 6, 7),
                          names_to = "commodity_year",
                          values_to = "price") |>
  separate(commodity_year, into = c("commodity", "year"),
           sep = -4)
```

Class Exercise 3

```{r}
prices_long |> pivot_wider(names_from = commodity,
                           values_from  = price)
```

Class Exercises 4

For the first line plot, the wider data set in class exercise 3 because rice is already its own column that can be used as an aesthetic in ggplot.

For the second, the longer data set: commodity would be an aethetic in the plot so it should be its own column in the data set.

Class Exercise 5

```{r}
mortality_df <- read_csv(here("data/under5mortality.csv"))
head(mortality_df)

mortality_long <- mortality_df |> pivot_longer(2:217,
                             names_to = "year",
                             values_to = "mortality") |>
  rename( "country" = `Under five mortality`) |>
  mutate(year = as.numeric(year))
  
```

Class Exercise 6

```{r}
ggplot(data = mortality_long, aes(x = year, y = mortality,
                                  group = country)) +
  geom_line(alpha = 0.2)
```

Class Exercise 7

Overall trend is down. The flat lines before 1900 probably indicate that we did not have data before that time point. 

## Your Turn

Your Turn 1

```{r}
library(tidyverse)
library(here)
baseball_df <- read_csv(here("data/mlb2016.csv"))
baseball_df
```

The `Years` column contains a few variables: the duration and the start date and the end date of the contract.

Also, the units ($) are in a few of the variables (like Salary, ...).

Your Turn 2

```{r}
baseball_sep <- baseball_df |> separate(Years, into = c("duration", "contract"),
                        sep = " ") |>
  separate(contract, into = c("start", "end"),
           sep = "-") |>
  print(n = 100)
```

Your Turn 3

Some players have single year contracts so there is no `-` to separate by, generating warnings for these players.

Your Turn 4

```{r}
baseball_sep <- baseball_sep |> mutate(Salary = parse_number(Salary),
                       start = parse_number(start),
                       end = parse_number(end))
```

Your Turn 5

```{r}
ggplot(data = baseball_sep, aes(x = POS, y = Salary)) +
  geom_boxplot()

ggplot(data = baseball_sep, aes(x = POS, y = Salary)) +
  geom_jitter(width = 0.2)

ggplot(data = baseball_sep, aes(x = Salary)) +
  geom_histogram(colour = "black", fill = "white") +
  facet_wrap(~ POS)

ggplot(data = baseball_sep, aes(x = Salary, colour = POS)) +
  geom_freqpoly()

ggplot(data = baseball_sep, aes(x = POS, y = Salary)) +
  geom_violin()
```

NFL Example

## Your Turn 6

```{r}
nfl_df <- read_csv(here::here("data/nfl_salary.csv"))

head(nfl_df)

## the data is not tidy because the positions are spread out
## over many different columns

## Your Turn 7
nfl_longer <- nfl_df |>
  pivot_longer(c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11), names_to = "position",
                       values_to = "salary")
```

## Your Turn 8

```{r}
nfl_longer <- nfl_longer |> group_by(year, position) |>
  mutate(rank_salary = rank(desc(salary),
                            ties.method = "first")) 
```

## Your Turn 9

```{r}
nfl_max <- nfl_longer |> filter(rank_salary == 1)

ggplot(data = nfl_max, aes(year, y = salary)) +
  geom_line(aes(colour = position))

ggplot(data = nfl_max, aes(year, y = salary)) +
  geom_line() +
  facet_wrap(~ position)

## colour is easeier to compare positions, but faceting
## lets us examine the pattern for each position more clearly
```

## Your Turn 10

```{r}
nfl_top20 <- nfl_longer |>
  filter(rank_salary <= 20) |>
  group_by(position, year) |>
  summarise(mean_salary = mean(salary))

ggplot(data = nfl_top20, aes(year, y = mean_salary)) +
  geom_line() +
  facet_wrap(~ position)
```

## Your Turn 11

```{r}
nfl_top20 <- nfl_top20 |> filter(year == 2011 | year == 2018) |>
  mutate(mean_salary_adj = if_else(year == 2011,
                                   true = mean_salary * 1.1447,
                                   false = mean_salary))

ggplot(nfl_top20, aes(x = year, y = mean_salary_adj)) +
  geom_line(aes(colour = position))
```

## Your Turn 12

```{r}
nfl_18 <- nfl_longer |> filter(year == 2018)
ggplot(data = nfl_18, aes(x = rank_salary, y = salary)) +
  geom_line(aes(colour = position)) +
  scale_colour_viridis_d()
```