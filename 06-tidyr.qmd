---
title: "Section 6: `tidyr`"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

## Class Exercises

Class Exercise 2

```{r}
library(tidyverse)
library(here)
prices_df <- read_csv(here("data/UBSprices2.csv"))
prices_long <- prices_df |> pivot_longer(2:7,
                          names_to = "commodity_year",
                          values_to = "price") |>
  separate(commodity_year, into = c("commodity", "year"),
           sep = -4)
## sep = -4 means that the separator will separate 
## 4 digits from the right

## class exercise 3
prices_wide <- prices_long |> pivot_wider(names_from = commodity,
                           values_from = price)
prices_long
prices_wide
```

Class Exercise 4. `prices_wide` is slightly easier for the first plot (you can make this plot with `prices_long`, just filtering so that `commodity == "rice"` first).

`prices_long` is easier to make the second plot because you can use `commodity` as a `colour` aesthetic.

Class Exercise 5.

```{r}
mortality_df <- read_csv(here("data/under5mortality.csv"))
head(mortality_df)
```


```{r}
mortality_long <- mortality_df |> pivot_longer(2:217, 
                             names_to = "Year",
                             values_to = "mortality",
                             names_transform = list(Year = as.numeric)) |>
  rename(country = `Under five mortality`)

ggplot(data = mortality_long, aes(x = Year,
                                  y = mortality)) +
  geom_line(aes(group = country), alpha = 0.2)
```

Class Exercise 7. The plot looks odd because many lines are completely flat before 1900. One reason for this could be that we actually do not have data for each year before 1900. In Albania, the mortality is constant in the 1800s, but, this is probably some sort of average across the entire century.

## Your Turn

Your Turn 1

```{r}
baseball_df <- read_csv(here("data/mlb2016.csv"))
head(baseball_df)
```

Some columns (salary, total.value, etc.) have a dollar sign, which is a unit.

Years column actually has total years that the player has played in the MLB and also has the specific year duration they've played.

Your Turn 2.

```{r}
baseball_clean <- baseball_df |> separate(Years, into = c("duration", "years_played"),
                        sep = " ") |>
  separate(years_played, into = c("start", "end"), sep = "-") |>
  mutate(Salary = parse_number(Salary),
         Total.Value = parse_number(Total.Value),
         Avg.Annual = parse_number(Avg.Annual),
         start = parse_number(start),
         end = parse_number(end))
```

Your Turn 3. Those players do not have a range of years so there is no `-` so there is nothing to separate by.

Your Turn 4.

```{r}
## see above/.
```

Your Turn 5.

Side-by-side boxplot or violin plot

```{r}
ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_violin()
ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_boxplot(colour = "deepskyblue4",
               fill = "deepskyblue1") +
  theme_minimal()
```

Strip plot

```{r}
ggplot(data = baseball_clean, aes(x = POS, y = Salary)) +
  geom_jitter(width = 0.2,
              aes(colour = POS),
              show.legend = FALSE) +
  theme_minimal() +
  scale_colour_viridis_d()
```

Faceted histograms

```{r}
ggplot(data = baseball_clean, aes(x = Salary)) +
  geom_histogram(colour = "deepskyblue4",
               fill = "deepskyblue1") +
  facet_wrap(~ POS) +
  theme_minimal()
```

Coloured frequency plot

```{r}
ggplot(data = baseball_clean, aes(x = Salary,
                                  colour = POS)) +
  geom_freqpoly() +
  theme_minimal()
```

Both boxplots and srip plot look good. The boxplots are easy to read, while you get an idea of sample size from the strip plot.

Your Turn 6

```{r}
nfl_df <- read_csv(here::here("data/nfl_salary.csv"))
nfl_df
```

Position should be its own variable and salary should be its own variable.

Your Turn 7

```{r}
nfl_long <- nfl_df |> pivot_longer(2:11, names_to = "position",
                       values_to = "salary")
```

Your Turn 8 and 9.

```{r}
## all three of these achieve the task in the exercise
nfl_long |> group_by(position, year) |>
  mutate(rank_var = rank(salary, ties.method = "first")) |>
  summarise(max_salary = max(salary, 
                             na.rm = TRUE))

nfl_max <- nfl_long |> group_by(position, year) |>
  mutate(rank_var = rank(desc(salary), ties.method = "first")) |>
  filter(rank_var == 1)

nfl_long |> group_by(position, year) |>
  arrange(desc(salary)) |>
  slice(1)
## ties.method = "first" means that the first row that is 
## tied gets a rank of 1, the second row gets 2, etc.
```

```{r}
nfl_max
ggplot(data = nfl_max, aes(x = year, y = salary)) +
  geom_line(aes(colour = position)) +
  theme_minimal() +
  scale_colour_viridis_d()

ggplot(data = nfl_max, aes(x = year, y = salary)) +
  geom_line(aes(colour = position)) +
  theme_minimal() +
  scale_colour_manual(values = c("red", "green",
                                 "red", "green", "green", "red",
                                 "blue", "blue", "white", "black"))
## you can change colours manually. These look terrible
## but it's just an example of how.

ggplot(data = nfl_max, aes(x = year, y = salary)) +
  geom_line() +
  facet_wrap(~ position) +
  theme_minimal()
```
