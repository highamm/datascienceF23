---
title: "Section 11: Merging and Joining with `dplyr`"
format: 
  html:
    embed-resources: true
---


## Class Exercises

Class Exercise 1

```{r}
library(tidyverse)
df_test1 <- tibble(key = c("A", "B", "C", "D"),
                   other_var = c(1, 5, 4, 2))
df_test1
df_test2 <- tibble(key2 = c("A", "C", "B", "D"),
                   other_var2 = c(4, 1, 3, 1))
df_test2
bind_cols(df_test1, df_test2)
## this is bad because the keys are not lined up
## correctly: a join is a better option.
```

Class Exercise 2


```{r}
library(here)
slumajors_df <- read_csv(here("data/SLU_Majors_15_19.csv"))
collegemajors_df <- read_csv(here("data/college-majors.csv"))
head(slumajors_df)

left_join(slumajors_df, collegemajors_df, by = "Major")
#b

## keys must match __exactly__ for the join to be performed 
## correctly
```

Class Exercise 3

```{r}
library(tidyverse)
mortality_df <- read_csv(here("data/gun_violence_us.csv"))
mortality_df

dc_df <- tibble(state = "DC",
       mortality_rate = 16.7, ownership_rate = 0.087,
       region = "NE")
all_df <- bind_rows(mortality_df, dc_df)

## class exercise 4
df1 <- as_tibble(state.x77)
df2 <- as_tibble(state.abb)
df1
states_df <- bind_cols(df1, df2)

## assume that the states are in the same order in both 
## data frames.
```

Class Exercise 5

```{r}
states_df <- states_df |> rename("state" = "value")

left_join(all_df, states_df, by = "state") 
## if original key: by = c("state" = "value")
## option 2
full_join(all_df, states_df, by = "state")
```

Class Exercise 6

```{r}
left_join(states_df, all_df, by = "state")
## if original key: by = c("value" = "state")
## option 2
right_join(all_df, states_df, by = "state")
## option 3
inner_join(states_df, all_df, by = "state")
```

Class Exercise 7

```{r}
ne_df <- all_df |> filter(region == "NE")
semi_join(all_df, ne_df, by = "state")
```

Class Exercise 8

```{r}
not_ne_df <- all_df |> filter(region != "NE")
anti_join(all_df, not_ne_df, by = "state")
```


## Your Turn 

Your Turn 1

a. True

b. True (see Venn diagrams on handout)

c. False (a semi_join can result in fewer rows than a left_join on the same two data sets)

Your Turn 2

a. 6 rows

b. 8 rows

c. 10 rows

d. 4 rows

e. 4 rows

f. 2 rows

Your Turn 3

```{r}
test1 <- tibble(state = "Washington D.C.", mortality_rate = 16.7,
                ownership_rate = 8.7, region = "NE")
bind_rows(mortality_df, test1)
## units are wrong

## test2 is wrong because characters go in quotes, doubles
## do not go in quotes

## test3 is wrong for the same reason: numbers do not go in quotes
```