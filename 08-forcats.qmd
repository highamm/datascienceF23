---
title: "Section 8: `forcats`"
author: "Matt Higham"
format: 
  html:
    embed-resources: true
---

## Class Exercises 

Class Exercise 1. The plots are flawed because we cannot see variability in defense values, the distribution shapes, outliers, or an approximate sample size. Better graphs that would address some or all of these include side-by-side boxplots, strip plot, or any other graph used to visualize a categorical and quantitative variable.

Class Exercise 2. The group_by(`#`) |> slice(1) says to keep the first row for each pokemon `#` (so any duplicates get dropped).

```{r}
library(tidyverse)
library(here)
pokemon_df <- read_csv(here("data/pokemon_allgen.csv")) |>
  mutate(Generation_cat = factor(Generation))
pokemon_df |> distinct(`#`, .keep_all = TRUE)
## equivalently only keeps the unique values of `#`
```

Class Exercise 3.

```{r}
pokemon_nodup <- pokemon_df |> group_by(`#`) |> slice(1) ## |>
  ## ungroup()
pokemon_long <- pokemon_nodup |>
  pivot_longer(c(`Type 1`, `Type 2`),
               names_to = "Number",
               values_to = "Type")

pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = median))
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip()
```

Grouping by `#` means that fct_reorder() is applied to each pokemon `#` individually, which makes no sense (so we get no re-ordering).

Class Exercise 4.

```{r}
library(tidyverse)
responses_df <- read_csv("https://raw.githubusercontent.com/highamm/ds234_quarto/main/data_online/heatmap.csv",
                         col_types =
                           cols(time = col_factor(),
                                challenge = col_factor()))
responses_df <- responses_df |>
  mutate(time = fct_recode(time,
                           "Most Time" = "1",
                           "Second" = "2",
                           "Third" = "3",
                           "Least Time" = "4"),
         challenge = fct_recode(challenge,
                                "Most Challenge" = "1",
                                "Second" = "2",
                                "Third" = "3",
                                "Least Challenge" = "4"))

responses_sum <- responses_df |> group_by(time, challenge,
                         .drop = FALSE) |>
  summarise(n_students = n()) |>
  mutate(challenge = fct_relevel(challenge,
                                 c("Most Challenge",
                                 "Second",
                                 "Third",
                                 "Least Challenge")),
         time = fct_relevel(time, c("Most Time",
                                    "Second",
                                    "Third",
                                    "Least Time"))) |>
  mutate(challenge = fct_rev(challenge))
ggplot(data = responses_sum, aes(x = time,
                                 y = challenge)) +
  geom_tile(aes(fill = n_students)) +
  scale_fill_viridis_c() +
  theme_minimal() +
  scale_x_discrete(position = "top")
```

Class Exercise 5.

```{r}
responses_challenge <- responses_df |>
  group_by(challenge) |>
  summarise(n_students = n()) |>
  mutate(challenge = fct_relevel(challenge,
                                 c("Most Challenge",
                                   "Second",
                                   "Third",
                                   "Least Challenge"))) |>
  mutate(challenge = fct_rev(challenge))

ggplot(data = responses_challenge, aes(x = challenge,
                                       y = n_students)) +
  geom_segment(aes(xend = challenge, y = 0,
                   yend = n_students)) +
  geom_point() +
  coord_flip() +
  theme_minimal()

## time
responses_sum |> group_by(time) |>
  summarise(n_student = sum(n_students))
## then can proceed with similar steps

## with these univariate lollipop plots, it is much
## easier to see the actual number of students respnding
## than it is with the heatmap
```

## Your Turn

```{r}
library(tidyverse)
library(here)
standings_df <- read_csv(here("data/standings.csv"))
standings_df
```

Your Turn 1

```{r}
table(standings_df$team_name)
```

Your Turn 2

```{r}
standings_clean <- standings_df |>
  mutate(team_name = fct_recode(team_name,
                                Commanders = "Redskins")) |>
  unite(col = "franchise", c(team, team_name),
        sep = " ") |>
  mutate(franchise = fct_collapse(franchise,
                                  `San Diego LA Chargers` = c("San Diego Chargers", "Los Angeles Chargers"),
                                  `St. Louis LA Rams` = c("St. Louis Rams", "Los Angeles Rams")))

standings_ten <- standings_clean |>
  filter(playoffs == "Playoffs") |> 
  group_by(franchise) |>
  summarise(n_playoffs = n()) |>
  arrange(desc(n_playoffs)) |>
  slice(1:10) |>
  mutate(franchise = fct_reorder(franchise, n_playoffs))

ggplot(data = standings_ten, aes(x = franchise,
                                 y = n_playoffs)) +
  geom_segment(aes(xend = franchise, y = 0, yend = n_playoffs)) +
  geom_point() +
  coord_flip() +
  theme_minimal()
```